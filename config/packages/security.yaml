security:
    encoders:
        App\Entity\User:
            algorithm: auto
    role_hierarchy:
        ROLE_SUPER_ADMIN: [ROLE_SUPER_ADMIN, ROLE_ADMIN, ROLE_CAISSIER]
        ROLE_ADMIN: [ROLE_ADMIN, ROLE_CAISSIER]
        ROLE_CAISSIER: [ROLE_CAISSIER]
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        entity_provider:
            entity:
                class: App\Entity\User
                property: username
        #in_memory: { memory: null }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            user_checker: App\Security\UserEnabledChecker


        api:
            pattern:   ^/api
            stateless: true
            anonymous: false
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        #main:
        #   anonymous: lazy

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
